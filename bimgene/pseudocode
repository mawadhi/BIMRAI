//Input the following standard parameters:

BUILDING_FOOTPRINT_SHAPE =
NUMBER_OF_FLOORS =
WALL_MATERIAL =
WALL_HEIGHT =
WALL_THICKNESS =
SLAB_HEIGHT =
ROOF_MATERIAL =
DISTANCE_BETWEEN_OPENINGS =
BIM_WINDOW_PART =
DOOR_MATERIAL =
QUOINS_Y_N = 
QUOIN_STYLE =
QUOIN_MATERIAL =
QUOIN_MORTAR_COLOR =
CORNICE_Y_N =
CORNICE_PROFILE =
CORNICE_THICKNESS =
PILASTERS_Y_N =
DIAMETER_OF_TOP =
DIAMETER_OF_BOTTOM =
PILASTER_PEDESTAL =
PILASTER_FLUTING =

//Input optional custom parameters (examples shown below):

CUSTOM_INSERTION_POINTS_1 =
CUSTOM_INSERTION_POINTS_2 =
CUSTOM_INSERTION_POINTS_3 =
CUSTOM_INSERTION_POINTS_4 =
CUSTOM_INSERTION_POINTS_5 =
CUSTOM_INSERTION_POINTS_6 =
CUSTOM_INSERTION_POINTS_7 =
CUSTOM_BIM_PART_1 =
CUSTOM_BIM_PART_2 =
CUSTOM_BIM_PART_3 =
CUSTOM_BIM_PART_4 =
CUSTOM_BIM_PART_5 =
CUSTOM_BIM_PART_6 =
CUSTOM_BIM_PART_7 =

//Algorithm 1: Calculate Wall Polylines and Edges:

initialize wall_polylines
initialize wall_edges

function vecZ(F) 
	do //Create a unit vector parallel to the Z-axis multiplied by a factor (F).
	return value
function arrLin(G,Dr,N)
	do //Graft a geometry data-tree (G) and create a linear array of G in a
	//direction (Dr) with a number of elements (N) in the array.
	return value
function deBrE(Br)
	do //Deconstruct an input B-rep geometry (Br) into its constituent edges.
	return value
function shift(L,N)
	do //Offset all items in an input data-tree list (L) by an integer value (N).
	return value
function rev(L)
	do //Reverse the order of items in an input data-tree list (L).
	return value
	
if data_stream = S(0) or S(1)
	G = BUILDING_FOOTPRINT_SHAPE
	Dr = vecZ(WALL_HEIGHT)
	N = NUMBER_OF_FLOORS
	wall_polylines = arrLin(G,Dr,N)
	wall_edges = rev(shift(deBrE(wall_polylines),1))

